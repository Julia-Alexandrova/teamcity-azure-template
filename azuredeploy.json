{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environmentName": {
      "type": "string",
      "defaultValue": "test",
      "minLength": 1,
      "metadata": {
        "description": "The name of TeamCity environment"
      }
    },
    "teamcityVersion": {
      "type": "string",
      "defaultValue": "latest",
      "minLength": 1,
      "metadata": {
        "description": "The version of TeamCity linux docker images"
      }
    },
    "VMSize": {
      "type": "string",
      "defaultValue": "Standard_A2_v2",
      "allowedValues": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A1_v2",
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_A8_v2",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_F1",
        "Standard_F2",
        "Standard_F4",
        "Standard_F8"
      ],
      "metadata": {
        "description": "Instance size for the TeamCity VM"
      }
    },
    "VMAdminUsername": {
      "type": "string",
      "defaultValue": "core",
      "metadata": {
        "description": "Username to login to the VMs"
      }
    },
    "SSHKeyData": {
      "type": "secureString",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "databaseSkuName": {
      "type": "string",
      "allowedValues": [
        "MYSQLB50",
        "MYSQLB100",
        "MYSQLS100",
        "MYSQLS200"
      ],
      "defaultValue": "MYSQLB50",
      "metadata": {
        "description": "Azure database for MySQL sku name: MySQL Basic 50/100 DTU or Standard 100/200 DTU"
      }
    },
    "databaseDTU": {
      "type": "int",
      "allowedValues": [
        50,
        100,
        200
      ],
      "defaultValue": 50,
      "metadata": {
        "description": "Azure database for MySQL pricing tier"
      }
    },
    "databaseSizeMB": {
      "type": "int",
      "allowedValues": [
        51200,
        102400
      ],
      "defaultValue": 51200,
      "metadata": {
        "description": "Azure database for MySQL Sku Size"
      }
    },
    "databasePassword": {
      "type": "secureString",
      "minLength": 8,
      "maxLength": 128,
      "metadata": {
        "description": "Azure database for MySQL administrator password"
      }
    }
  },
  "variables": {
    "publicIpName": "[concat('teamcity-', parameters('environmentName'), '-pip')]",
    "publicIpDns": "[concat('teamcity-', uniqueString(resourceGroup().id, parameters('environmentName')))]",
    "virtualNetworkName": "[concat('teamcity-', parameters('environmentName'), '-vnet')]",
    "networkName": "[concat('teamcity-', parameters('environmentName'), '-net')]",
    "networkSubnet": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '/subnets/default')]",
    "networkSecurityGroupName": "[concat('teamcity-', parameters('environmentName'), '-nsg')]",
    "vmName": "[concat('teamcity-', parameters('environmentName'))]",
    "sshKeyPath": "[concat('/home/',parameters('VMAdminUsername'),'/.ssh/authorized_keys')]",
    "dbServerName": "[concat('teamcity-', parameters('environmentName'), '-', uniqueString(resourceGroup().id, parameters('environmentName')))]",
    "dbName": "teamcitydb",
    "storageAccountName": "[concat('teamcity', uniqueString(resourceGroup().id))]",
    "storageFileShare": "[concat('teamcity-', parameters('environmentName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-08-01",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('publicIpDns')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-08-01",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/24"
          ]
        },
        "subnets": [
          {
            "name": "default",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-ssh",
            "properties": {
              "priority": 1000,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          },
          {
            "name": "default-allow-http",
            "properties": {
              "priority": 1010,
              "protocol": "TCP",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('networkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIpName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "apiVersion": "2016-09-01",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('vmName'), '-config')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpName'))]"
              },
              "subnet": {
                "id": "[variables('networkSubnet')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      }
    },
    {
      "type": "Microsoft.DBforMySQL/servers",
      "name": "[variables('dbServerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-04-30-preview",
      "properties": {
        "version": "5.7",
        "administratorLogin": "teamcity",
        "administratorLoginPassword": "[parameters('databasePassword')]",
        "storageMB": "[parameters('databaseSizeMB')]",
        "sslEnforcement": "Disabled"
      },
      "sku": {
        "name": "[parameters('databaseSkuName')]",
        "tier": "Basic",
        "capacity": "[parameters('databaseDTU')]",
        "size": "[parameters('databaseSizeMB')]",
        "family": "SkuFamily"
      },
      "resources": [
        {
          "type": "firewallrules",
          "apiVersion": "2017-04-30-preview",
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "firewall",
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "databases",
          "name": "[variables('dbName')]",
          "apiVersion": "2017-04-30-preview",
          "properties": {
            "charset": "utf8",
            "collation": "utf8_general_ci"
          },
          "dependsOn": [
            "[concat('Microsoft.DBforMySQL/servers/', variables('dbServerName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2017-10-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "supportsHttpsTrafficOnly": "false",
        "accessTier": "Hot",
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('networkName'))]"
      ],
      "apiVersion": "2016-04-30-preview",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('VMSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('VMAdminUsername')]",
          "customData": "[base64(concat('#cloud-config\nwrite_files:\n  - path: \"/etc/teamcity-version\"\n    content: |\n      TEAMCITY_VERSION=',parameters('teamcityVersion'),'\n  - path: \"/etc/coreos/update.conf\"\n    content: |\n      REBOOT_STRATEGY=\"off\"\ncoreos:\n  units:\n    - name: \"install-cifs.service\"\n      enable: true\n      content: |\n        [Unit]\n        Description=Download basic mount.cifs binary\n        After=docker.service network.target\n        Requires=docker.service\n        Before=teamcity-server.service mnt-data.service\n        ConditionFileIsExecutable=!/opt/bin/mount.cifs\n\n        [Service]\n        Type=oneshot\n        TimeoutStartSec=0\n        ExecStart=/usr/bin/mkdir -p /opt/bin\n        ExecStart=/usr/bin/docker run --rm -v /opt/bin:/target so0k/mount.cifs_copy:6.4 /target\n        ExecStart=/usr/bin/docker run --rm microsoft/azure-cli az storage share create -n ',variables('storageFileShare'),' \\\n          --account-name ',variables('storageAccountName'),' --account-key ',listKeys(variables('storageAccountName'), '2017-10-01').keys[0].value,'\n        ExecStart=/usr/bin/docker rmi so0k/mount.cifs_copy:6.4\n        ExecStart=/usr/bin/docker rmi microsoft/azure-cli\n\n        [Install]\n        WantedBy=multi-user.target\n    - name: \"mnt-data.service\"\n      enable: true\n      content: |\n        [Unit]\n        Before=teamcity-server.service\n        After=install-cifs.service\n        Requires=network-online.target install-cifs.service\n        Conflicts=umount.target\n\n        [Service]\n        Type=oneshot\n        TimeoutStartSec=0\n        RemainAfterExit=yes\n        ExecStart=/usr/bin/mkdir -p /mnt/data\n        ExecStart=/opt/bin/mount.cifs //',variables('storageAccountName'),'.file.core.windows.net/',variables('storageFileShare'),' /mnt/data \\\n          -o vers=2.1,user=',variables('storageAccountName'),',pass=',listKeys(variables('storageAccountName'), '2017-10-01').keys[0].value,',dir_mode=0777,file_mode=0777,sec=ntlmssp\n\n        [Install]\n        RequiredBy=teamcity-server.service\n    - name: \"get-mysql-connector.service\"\n      enable: true\n      content: |\n        [Unit]\n        Before=teamcity-server.service\n        After=mnt-data.service\n        Requires=mnt-data.service\n        ConditionPathExists=!/mnt/data/teamcity/lib/jdbc/mysql-connector-java-bin.jar\n\n        [Service]\n        Type=oneshot\n        ExecStart=/usr/bin/mkdir -p /mnt/data/teamcity/lib/jdbc\n        ExecStart=/usr/bin/wget -O /mnt/data/teamcity/lib/jdbc/mysql-connector-java-bin.jar \\\n          http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.43/mysql-connector-java-5.1.43.jar\n\n        [Install]\n        WantedBy=multi-user.target\n    - name: \"prepare-db-properties.service\"\n      enable: true\n      content: |\n        [Unit]\n        Before=teamcity-server.service\n        After=mnt-data.service\n        Requires=mnt-data.service network-online.target\n        ConditionPathExists=!/mnt/data/teamcity/config/database.properties\n\n        [Service]\n        Type=oneshot\n        ExecStart=/usr/bin/mkdir -p /mnt/data/teamcity/config\n        ExecStart=/bin/bash -c ''echo connectionProperties.user=teamcity@',variables('dbServerName'),' > /mnt/data/teamcity/config/database.properties''\n        ExecStart=/bin/bash -c ''echo connectionProperties.password=',parameters('databasePassword'),' >> /mnt/data/teamcity/config/database.properties''\n        ExecStart=/bin/bash -c ''echo connectionUrl=jdbc\\\\:mysql\\\\://',variables('dbServerName'),'.mysql.database.azure.com/',variables('dbName'),' >> /mnt/data/teamcity/config/database.properties''\n\n        [Install]\n        WantedBy=multi-user.target\n    - name: \"teamcity-server.service\"\n      command: \"start\"\n      content: |\n        [Unit]\n        Description=TeamCity Server\n        After=docker.service mnt-data.service get-mysql-connector.service prepare-db-properties.service\n        Requires=docker.service mnt-data.service get-mysql-connector.service prepare-db-properties.service\n\n        [Service]\n        EnvironmentFile=/etc/teamcity-version\n        TimeoutStartSec=1200s\n        ExecStartPre=/bin/sh -c \"docker images --filter ''before=jetbrains/teamcity-server:${TEAMCITY_VERSION}'' --format ''{{.ID}} {{.Repository}}'' | grep ''jetbrains/teamcity-server'' | grep -Eo ''^[^ ]+'' | xargs -r docker rmi\"\n        ExecStart=/usr/bin/docker run \\\n          -v /mnt/data/teamcity:/data/teamcity_server/datadir \\\n          -v /mnt/data/logs/teamcity:/opt/teamcity/logs \\\n          -v /mnt/data/temp/teamcity:/opt/teamcity/temp \\\n          -p 80:8111 \\\n          --name teamcity-server \\\n          jetbrains/teamcity-server:${TEAMCITY_VERSION}\n        ExecStop=-/usr/bin/docker exec teamcity-server /opt/teamcity/bin/teamcity-server.sh stop 60\n        ExecStopPost=-/usr/bin/docker stop teamcity-server\n        ExecStopPost=-/usr/bin/docker rm teamcity-server\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target\n    - name: \"teamcity-agent.service\"\n      command: \"start\"\n      content: |\n        [Unit]\n        Description=TeamCity Agent\n        After=teamcity-server.service coreos-metadata.service\n        Requires=teamcity-server.service coreos-metadata.service\n\n        [Service]\n        EnvironmentFile=/etc/teamcity-version\n        TimeoutStartSec=1200s\n        EnvironmentFile=/run/metadata/coreos\n        ExecStartPre=/bin/sh -c \"docker images --filter ''before=jetbrains/teamcity-agent:${TEAMCITY_VERSION}'' --format ''{{.ID}} {{.Repository}}'' | grep ''jetbrains/teamcity-agent'' | grep -Eo ''^[^ ]+'' | xargs -r docker rmi\"\n        ExecStart=/usr/bin/docker run \\\n          -v /mnt/data/temp/teamcity:/opt/teamcity/temp \\\n          -e SERVER_URL=${COREOS_AZURE_IPV4_DYNAMIC} \\\n          -e AGENT_NAME=Default \\\n          --name teamcity-agent \\\n          jetbrains/teamcity-agent:${TEAMCITY_VERSION}\n        ExecStop=-/usr/bin/docker stop teamcity-agent\n        ExecStopPost=-/usr/bin/docker rm teamcity-agent\n        Restart=always\n\n        [Install]\n        WantedBy=multi-user.target'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('SSHKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "CoreOS",
            "offer": "CoreOS",
            "sku": "Stable",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmName'), '-os')]",
            "vhd": {
              "uri": "[concat('https://', variables('storageAccountName'), '.blob.core.windows.net/vhds/', variables('vmName'), '-os.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkName'))]"
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "teamcityURL": {
      "type": "string",
      "value": "[concat('http://', reference(variables('publicIpName')).dnsSettings.fqdn)]"
    },
    "SSH": {
      "type": "string",
      "value": "[concat('ssh ', parameters('VMAdminUsername'), '@', reference(variables('publicIpName')).dnsSettings.fqdn)]"
    }
  }
}